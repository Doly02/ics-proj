using SchoolSystem.BL.Facades;
using SchoolSystem.BL.Mappers;
using SchoolSystem.BL.Models;
using SchoolSystem.Common.Tests;
using SchoolSystem.Common.Tests.Factories;
using SchoolSystem.Common.Tests.Seeds;
using SchoolSystem.DAL;
using SchoolSystem.DAL.Enums;
using SchoolSystem.DAL.Tests;
using SchoolSystem.DAL.UnitOfWork;
using Microsoft.EntityFrameworkCore;
using Xunit;
using Xunit.Abstractions;
using Microsoft.VisualStudio.TestPlatform.Utilities;

public sealed class ActivityFacadeTests : FacadeTestsBase
{
    private readonly IActivityFacade _activityFacadeSUT;
    private readonly ITestOutputHelper _output;


    public ActivityFacadeTests(ITestOutputHelper output) : base(output)
    {

        _activityFacadeSUT = new ActivityFacade(UnitOfWorkFactory, ActivityModelMapper);
        _output = output;
    }

    [Fact]
    public async Task CreateActivity_WithExistingSubject_DoesNotThrow()
    {
        // Vezmeme existující subjectId z předpřipravených seed dat.
        var subjectId = SubjectSeeds.ICS.Id;

        var model = new ActivityDetailModel
        {
            // ID není nastavené, protože očekáváme, že bude generováno databází.
            Name = "Nová studijní skupina",
            Description = "Příprava na matematiku",
            Start = DateTime.UtcNow.AddDays(1),
            End = DateTime.UtcNow.AddDays(1).AddHours(2),
            Place = "Knihovna, místnost 101",
            ActivityType = ActivityType.Project
        };

        Exception exception = await Record.ExceptionAsync(() =>
            _activityFacadeSUT.SaveAsync(model, subjectId));

        Assert.Null(exception);
    }




    [Fact]
    public async Task CreateActivity_WithValidData_DoesNotThrow()
    {
        var model = new ActivityDetailModel
        {
            Id = Guid.Empty, // Id should be empty because it will be generated by the database.
            Name = "New Study Session",
            Description = "Description of the study session",
            Start = DateTime.UtcNow.AddDays(1),
            End = DateTime.UtcNow.AddDays(1).AddHours(2),
            Place = "Library Room 101",
            ActivityType = ActivityType.Project,
            SubjectName = "Mathematics" // This should be a valid name that corresponds to a subject in the database.
        };

        var exception = await Record.ExceptionAsync(() => _activityFacadeSUT.SaveAsync(model, SubjectSeeds.ICS.Id));

        Assert.Null(exception);
    }

    [Fact]
    public async Task GetAll_Single_SeededActivity()
    {
        _output.WriteLine("Getting all activities...");
        var activities = await _activityFacadeSUT.GetAsync();
        _output.WriteLine($"Total activities retrieved: {activities.Count()}");

        try
        {
            var activity = activities.Single(a => a.Id == ActivitySeeds.ActivityEntity.Id);
            _output.WriteLine("Activity found: " + activity.ActivityName);
            DeepAssert.Equal(ActivityModelMapper.MapToListModel(ActivitySeeds.ActivityEntity), activity);
        }
        catch (Exception ex)
        {
            _output.WriteLine("An error occurred: " + ex.Message);
            throw;
        }
    }

    [Fact]
    public async Task GetById_SeededActivity()
    {
        var activity = await _activityFacadeSUT.GetAsync(ActivitySeeds.ActivityEntity.Id);

        DeepAssert.Equal(ActivityModelMapper.MapToDetailModel(ActivitySeeds.ActivityEntity), activity);
    }

    [Fact]
    public async Task GetById_NonExistent()
    {
        var activity = await _activityFacadeSUT.GetAsync(Guid.NewGuid()); // Using a random GUID to simulate non-existence.

        Assert.Null(activity);
    }

    [Fact]
    public async Task SeededActivity_DeleteById_Deleted()
    {
        await _activityFacadeSUT.DeleteAsync(ActivitySeeds.ActivityEntity.Id);

        await using var dbxAssert = await DbContextFactory.CreateDbContextAsync();
        Assert.False(await dbxAssert.Activities.AnyAsync(a => a.Id == ActivitySeeds.ActivityEntity.Id));
    }



    // Další testovací metody podle potřeby...
}
